{"version":3,"sources":["components/utils/BEM.ts","components/RelativeDate/RelativeDate.tsx","components/RelativeDateFromNow/RelativeDateFromNow.tsx","components/DateInterval/RelativeDateIntervalFromNow.tsx","components/Launch/Launch.tsx","components/App/App.tsx","components/utils/data.ts","reportWebVitals.ts","index.tsx"],"names":["getBEMPAth","b","e","m","base","join","reduce","str","elementName","modifiers","Array","isArray","filter","Boolean","Object","entries","value","map","RelativeDate","baseDate","date","dateTime","toISOString","formatRelative","RelativeDateFromNow","useState","Date","nowDate","setNowDate","useInterval","BEM","RelativeDateIntervalFromNow","interval","className","start","end","Launch","name","window","getUrl","baseUrl","params","queryString","pipe","obj","acc","key","append","String","URLSearchParams","toString","jsonToQueryString","get","memoizeWith","url","a","fetch","json","upcomingLunchesAdapter","rawData","slug","window_start","window_end","location__id","locationId","results","getUpcomingLunches","App","lunchesParams","setLunchesParams","launch","useAsync","search","setSearch","useDebounce","type","onChange","target","trim","loading","error","JSON","stringify","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c8c3767.chunk.js","sourcesContent":["type Modifier = any[] | Record<string, any>\ntype B = (b: string) => (elementName?: string | Modifier, modifiers?: Modifier) => string\ntype GetBEMPAth = (b: string, e: string, m: string[]) => string\n\nconst ELEMENT_SEPARATOR = \"__\"\nconst MODIFIER_SEPARATOR = \"_\"\n\nconst getBEMPAth: GetBEMPAth = (b, e, m) => {\n    const base = e !== \"\" ? [b, e].join(ELEMENT_SEPARATOR) : b\n\n    return `${base} ${m.reduce((str, m) => `${str} ${base}${MODIFIER_SEPARATOR}${m}`, \"\")}`\n}\n\nconst b: B = (b) => (elementName, modifiers = []) => {\n    modifiers = typeof elementName === \"string\" ? modifiers : elementName || []\n\n    return getBEMPAth(\n        b,\n        typeof elementName === \"string\" ? elementName : \"\",\n        Array.isArray(modifiers)\n            ? modifiers.filter(Boolean)\n            : Object.entries(modifiers)\n                .filter(([, value]) => Boolean(value))\n                .map(([key]) => key)\n    )\n}\n\nexport default b\n","import {formatRelative} from 'date-fns';\nimport * as React from 'react';\n\ntype Props = {\n    baseDate: Date,\n    date: Date\n}\n\nconst RelativeDate: React.FC<Props> = (({baseDate, date}) => <time dateTime={date.toISOString()}>\n    {formatRelative(date, baseDate)}\n</time>);\n\nexport default RelativeDate;\n","import React, {useState} from \"react\";\nimport RelativeDate from \"../RelativeDate/RelativeDate\";\nimport {useInterval} from \"react-use\";\n\ntype Props = {\n    date: Date\n}\n\nconst RelativeDateFromNow: React.FC<Props> = ({date}) => {\n    const [nowDate, setNowDate] = useState<Date>(new Date());\n\n    useInterval(() => setNowDate(new Date()), 1000)\n\n    return <RelativeDate baseDate={nowDate} date={date}/>\n}\n\nexport default RelativeDateFromNow\n","import {DateIntervalType} from \"../utils/commonTypes\";\nimport RelativeDateFromNow from \"../RelativeDateFromNow/RelativeDateFromNow\";\n// Styles\nimport \"./RelativeDateIntervalFromNow.css\"\nimport BEM from \"../utils/BEM\";\n\nconst b = BEM(\"RelativeDateIntervalFromNow\")\n\ntype Props = {\n    interval: DateIntervalType\n}\nconst RelativeDateIntervalFromNow: React.FC<Props> = ({interval}) => <>\n    <span className={b()}>\n        <span className={b(\"time\")}><RelativeDateFromNow date={interval.start}/></span>\n        &nbsp;â€”&nbsp;\n        <span className={b(\"time\")}><RelativeDateFromNow date={interval.end}/></span>\n    </span>\n</>\n\nexport default RelativeDateIntervalFromNow\n","import React from \"react\";\nimport {DateIntervalType} from \"../utils/commonTypes\";\nimport RelativeDateFromNow from \"../RelativeDateFromNow/RelativeDateFromNow\";\nimport RelativeDateIntervalFromNow from \"../DateInterval/RelativeDateIntervalFromNow\";\n// style\nimport \"./Launch.css\"\nimport BEM from \"../utils/BEM\"\n\nconst b = BEM(\"Launch\")\n\ntype Props = {\n    name: string;\n    window: DateIntervalType\n}\n\nconst Launch: React.FC<Props> = ({name, window}) => (\n    <div className={b()}>\n        <span>{name}</span>\n        <span><RelativeDateIntervalFromNow interval={window}/></span>\n    </div>)\n\nexport default Launch;\n","import React, {useState} from 'react';\nimport {useAsync, useDebounce} from \"react-use\";\nimport {memoizeWith, map} from \"ramda\";\nimport {jsonToQueryString} from \"../utils/data\";\n// styles\nimport BEM from \"../utils/BEM\";\nimport \"./App.css\"\nimport {DateIntervalType} from \"../utils/commonTypes\";\nimport Launch from \"../Launch/Launch\";\n\nconst b = BEM(\"App\")\n\n\nconst getUrl = (baseUrl: string, params: Object): string => {\n    const queryString = jsonToQueryString(params)\n\n    return `${baseUrl}${queryString ? `?${queryString}` : \"\"}`;\n}\n\nconst get = memoizeWith(\n    (url: string, params: Object = {}): string => getUrl(url, params),\n    async (url: string, params: Object) => await (await fetch(getUrl(url, params))).json())\n\ntype LaunchRequestParams = {\n    search?: string\n}\ntype LaunchResponse = {\n    results: {\n        name: string,\n        slug: string,\n        window_start: string\n        window_end: string\n        location__id: number,\n    }[]\n}\ntype LaunchType = {\n    name: string,\n    slug: string,\n    window: DateIntervalType\n}\n\nconst upcomingLunchesAdapter = (rawData: LaunchResponse): LaunchType[] =>\n    map(({name, slug, window_start, window_end, location__id}) => ({\n        name,\n        slug,\n        window: {\n            start: new Date(window_start),\n            end: new Date(window_end)\n        },\n        locationId: location__id,\n    }), rawData.results)\n\nconst getLunches = async (params: LaunchRequestParams): Promise<LaunchResponse> => get(\"https://lldev.thespacedevs.com/2.2.0/launch\", params)\n\n// @ts-ignore\nconst getUpcomingLunches = async (params: LaunchRequestParams): Promise<LaunchType> => upcomingLunchesAdapter(\n    (await get(\"https://lldev.thespacedevs.com/2.2.0/launch/upcoming\", params) as LaunchResponse)\n)\n\n\nconst App = () => {\n    const [lunchesParams, setLunchesParams] = useState<LaunchRequestParams>({});\n    const launch = useAsync(() => getUpcomingLunches(lunchesParams), [lunchesParams])\n    const [search, setSearch] = useState<string>(\"\");\n\n    useDebounce(() => setLunchesParams((lunchesParams) => ({...lunchesParams, search})), 400, [search]);\n\n    return (\n        <div className={b()}>\n            <input className={b(\"search-input\")} type=\"text\" value={search}\n                   onChange={({target}) => setSearch(target.value.trim())}/>\n            {launch.loading && !launch.value && <div>Loading...</div>}\n            {launch.error && <div>Error: {JSON.stringify(launch.error)}</div>}\n\n            <div className={b(\"result\", {loading: launch.loading})}>\n                {// @ts-ignore*/\n                    launch.value?.length !== 0\n                        // @ts-ignore*/\n                        ? map(({name, slug, window}: LaunchType) => <Launch name={name} window={window}/>, launch.value || [])\n                        : <span>\"No data\"</span>}\n            </div>\n\n        </div>\n    );\n};\n\nexport default App;\n","import {pipe, reduce} from \"ramda\";\n\nexport const jsonToQueryString =  (params: object) => pipe(\n    (obj: Record<string, any>) => Object.entries(obj),\n    reduce((acc: URLSearchParams, [key, value]) => {\n        acc.append(key, String(value))\n        return acc;\n    }, new URLSearchParams()),\n    (params: URLSearchParams) => params.toString(),\n)(params);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}